import { useState } from "react";
import { X, Bot, RefreshCw, Copy, Check } from "lucide-react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { useGenerateAISummary } from "@/hooks/useAI";
import { useToast } from "@/hooks/use-toast";
import { formatDate, getCategoryColor } from "@/lib/utils";
import type { Document } from "@shared/schema";

interface AISummaryModalProps {
  document: Document | null;
  onClose: () => void;
}

export default function AISummaryModal({ document, onClose }: AISummaryModalProps) {
  const [copied, setCopied] = useState(false);
  const { toast } = useToast();
  const regenerateMutation = useGenerateAISummary();

  const handleCopy = async () => {
    if (!document?.summary) return;
    
    try {
      await navigator.clipboard.writeText(document.summary);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
      toast({
        title: "Copied to clipboard",
        description: "The AI summary has been copied to your clipboard",
      });
    } catch (error) {
      toast({
        title: "Failed to copy",
        description: "Could not copy the summary to clipboard",
        variant: "destructive",
      });
    }
  };

  const handleRegenerate = () => {
    if (!document) return;
    
    regenerateMutation.mutate(document.id, {
      onSuccess: () => {
        toast({
          title: "Summary regenerated",
          description: "A new AI summary has been generated for your document",
        });
      },
      onError: (error) => {
        toast({
          title: "Failed to regenerate",
          description: error.message,
          variant: "destructive",
        });
      },
    });
  };

  if (!document) return null;

  const metadata = document.metadata as any;
  const keyPoints = metadata?.keyPoints || [];

  return (
    <Dialog open={!!document} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[90vh] w-full">
        <DialogHeader>
          <DialogTitle className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Bot className="w-5 h-5 text-accent" />
              <span>AI Summary</span>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={onClose}
              className="p-2"
            >
              <X className="w-4 h-4" />
            </Button>
          </DialogTitle>
        </DialogHeader>
        
        <div className="flex-1 overflow-y-auto">
          <div className="space-y-4">
            <div className="bg-muted rounded-lg p-4">
              <h4 className="font-medium text-foreground mb-2">
                {document.originalName}
              </h4>
              <div className="flex items-center justify-between">
                <p className="text-sm text-muted-foreground">
                  Generated by AI â€¢ {document.aiSummaryGenerated ? formatDate(document.aiSummaryGenerated) : "Processing..."}
                </p>
                {document.category && (
                  <Badge className={getCategoryColor(document.category)}>
                    {document.category}
                  </Badge>
                )}
              </div>
            </div>
            
            {document.summary ? (
              <>
                {keyPoints.length > 0 && (
                  <div className="space-y-3">
                    <h5 className="font-medium text-foreground">Key Points:</h5>
                    <ul className="space-y-2">
                      {keyPoints.map((point: string, index: number) => (
                        <li key={index} className="flex items-start space-x-2">
                          <Check className="w-4 h-4 text-green-600 mt-0.5 flex-shrink-0" />
                          <span className="text-foreground">{point}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
                
                <div className="space-y-3">
                  <h5 className="font-medium text-foreground">Summary:</h5>
                  <p className="text-foreground leading-relaxed">
                    {document.summary}
                  </p>
                </div>
                
                <div className="flex space-x-2 pt-4 border-t">
                  <Button
                    onClick={handleRegenerate}
                    disabled={regenerateMutation.isPending}
                    variant="outline"
                    size="sm"
                  >
                    <RefreshCw className={`w-4 h-4 mr-2 ${regenerateMutation.isPending ? 'animate-spin' : ''}`} />
                    {regenerateMutation.isPending ? "Regenerating..." : "Regenerate"}
                  </Button>
                  <Button
                    onClick={handleCopy}
                    variant="outline"
                    size="sm"
                  >
                    {copied ? (
                      <>
                        <Check className="w-4 h-4 mr-2" />
                        Copied!
                      </>
                    ) : (
                      <>
                        <Copy className="w-4 h-4 mr-2" />
                        Copy
                      </>
                    )}
                  </Button>
                </div>
              </>
            ) : (
              <div className="text-center py-8">
                <Bot className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                <p className="text-muted-foreground">
                  No AI summary available for this document
                </p>
                <Button
                  onClick={handleRegenerate}
                  disabled={regenerateMutation.isPending}
                  className="mt-4"
                >
                  <RefreshCw className={`w-4 h-4 mr-2 ${regenerateMutation.isPending ? 'animate-spin' : ''}`} />
                  {regenerateMutation.isPending ? "Generating..." : "Generate Summary"}
                </Button>
              </div>
            )}
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
